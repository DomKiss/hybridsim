y_2 <- y[A:B]
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
predict_y <- matrix(0, testsize, 1)
nnonly_results <- matrix(0, testsize, 1)
residual_fc <- matrix(0, testsize, 1)
nnresults<- matrix(0, testsize, 1)
final_results<- matrix(0, testsize, 1)
SSE_lin <- 0
SSE_hibr <- 0
SSE_NN <- 0
for(i in 1:testsize)
{
predict_y[i] <- intercept+x.ma_2[i]*co_x.ma_2+x.moment_2[i]*co_x.moment_2
SSE_lin <- SSE_lin+(predict_y[i]-y_2[i])^2
residual_fc[i] <- predict_y[i]-y_2[i]
nn_test_df=data.frame(x.ma_2[i], x.moment_2[i])
predict_y_nnonly <- compute(nn_only, nn_test_df)
nnonly_results[i] <- predict_y_nnonly$net.result
SSE_NN <- SSE_NN + (nnonly_results[i]-y_2[i])^2
predictnn_y <- compute(nn,nn_test_df)
nnresults[i] <- predictnn_y$net.result
final_results[i] <- nnresults[i] + predict_y[i]
SSE_hibr <- SSE_hibr+(final_results[i]-y_2[i])^2
}
RMSE_lin[k+1] <- sqrt(SSE_lin/testsize)
RMSE_hibr[k+1] <- sqrt(SSE_hibr/testsize)
}
#print(RMSE_lin[k+1])
#print(RMSE_hibr[k+1])
print(SSE_lin)
print(SSE_NN)
print(SSE_hibr)
residual_tr <- residuals(llmm)
residual_tr
length(residual_tr)
length(y_2)
length(x.ma_2)
length(x.moment_2)
llmm <- lm(y_2~x.ma_2+x.moment_2) #define linear model
intercept  <- coef(llmm)[1]
co_x.ma_2   <- coef(llmm)[2]
co_x.moment_2 <- coef(llmm)[3]
residual_tr <- residuals(llmm)
length(residual_tr)
#rolling window lm model
windowsSize <- 4000 # training data size
testsize    < - 70    # number of observation to forecast
Nexp <- floor((length(x.ma)-windowsSize+1)/testsize) #maximum of possible experiments
for(k in 0:10)  # run experiments
{
A         <- k*testsize + 1
B         <- A + windowsSize - 1
start_obs <- A
end_obs   <- B
y_2 <- y[A:B] #
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
df_nnonly <- data.frame(cbind(y_2,x.ma_2, x.moment_2))
llmm <- lm(y_2~x.ma_2+x.moment_2) #define linear model
intercept  <- coef(llmm)[1]
co_x.ma_2   <- coef(llmm)[2]
co_x.moment_2 <- coef(llmm)[3]
residual_tr <- residuals(llmm)
df_nn=data.frame(residual_tr, x.ma_2, x.moment_2) #data frame, for hybrid NN
nn=neuralnet(residual_tr~x.ma_2+x.moment_2, data=df_nn, hidden=3,act.fct = "logistic") #neural network fitting on the residuals of the linear model
nn_only=neuralnet(y_2~x.ma_2+x.moment_2, data=df_nnonly, hidden=3, act.fct="logistic") #single neural network, fitting on the original dataset
A <- B+1
B <- B + testsize
y_2 <- y[A:B]
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
predict_y <- matrix(0, testsize, 1)
nnonly_results <- matrix(0, testsize, 1)
residual_fc <- matrix(0, testsize, 1)
nnresults<- matrix(0, testsize, 1)
final_results<- matrix(0, testsize, 1)
SSE_lin <- 0
SSE_hibr <- 0
SSE_NN <- 0
for(i in 1:testsize)
{
predict_y[i] <- intercept+x.ma_2[i]*co_x.ma_2+x.moment_2[i]*co_x.moment_2
SSE_lin <- SSE_lin+(predict_y[i]-y_2[i])^2
residual_fc[i] <- predict_y[i]-y_2[i]
nn_test_df=data.frame(x.ma_2[i], x.moment_2[i])
predict_y_nnonly <- compute(nn_only, nn_test_df)
nnonly_results[i] <- predict_y_nnonly$net.result
SSE_NN <- SSE_NN + (nnonly_results[i]-y_2[i])^2
predictnn_y <- compute(nn,nn_test_df)
nnresults[i] <- predictnn_y$net.result
final_results[i] <- nnresults[i] + predict_y[i]
SSE_hibr <- SSE_hibr+(final_results[i]-y_2[i])^2
}
RMSE_lin[k+1] <- sqrt(SSE_lin/testsize)
RMSE_hibr[k+1] <- sqrt(SSE_hibr/testsize)
}
#print(RMSE_lin[k+1])
#print(RMSE_hibr[k+1])
print(SSE_lin)
print(SSE_NN)
print(SSE_hibr)
llmm <- lm(y_2~x.ma_2+x.moment_2) #define linear model
llmm
summary(llmm)
View(y_2)
View(y)
A
B
A-B
k=0
#rolling window lm model
windowsSize <- 4000 # training data size
testsize    < - 70    # number of observation to forecast
Nexp <- floor((length(x.ma)-windowsSize+1)/testsize) #maximum of possible experiments
for(k in 0:10)  # run experiments
{
A         <- k*testsize + 1
B         <- A + windowsSize - 1
start_obs <- A
end_obs   <- B
y_2 <- y[A:B] #
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
df_nnonly <- data.frame(cbind(y_2,x.ma_2, x.moment_2))
llmm <- lm(y_2~x.ma_2+x.moment_2) #define linear model
intercept  <- coef(llmm)[1]
co_x.ma_2   <- coef(llmm)[2]
co_x.moment_2 <- coef(llmm)[3]
residual_tr <- residuals(llmm)
df_nn=data.frame(residual_tr, x.ma_2, x.moment_2) #data frame, for hybrid NN
nn=neuralnet(residual_tr~x.ma_2+x.moment_2, data=df_nn, hidden=3,act.fct = "logistic") #neural network fitting on the residuals of the linear model
nn_only=neuralnet(y_2~x.ma_2+x.moment_2, data=df_nnonly, hidden=3, act.fct="logistic") #single neural network, fitting on the original dataset
A <- B+1
B <- B + testsize
y_2 <- y[A:B]
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
predict_y <- matrix(0, testsize, 1)
nnonly_results <- matrix(0, testsize, 1)
residual_fc <- matrix(0, testsize, 1)
nnresults<- matrix(0, testsize, 1)
final_results<- matrix(0, testsize, 1)
SSE_lin <- 0
SSE_hibr <- 0
SSE_NN <- 0
for(i in 1:testsize)
{
predict_y[i] <- intercept+x.ma_2[i]*co_x.ma_2+x.moment_2[i]*co_x.moment_2
SSE_lin <- SSE_lin+(predict_y[i]-y_2[i])^2
residual_fc[i] <- predict_y[i]-y_2[i]
nn_test_df=data.frame(x.ma_2[i], x.moment_2[i])
predict_y_nnonly <- compute(nn_only, nn_test_df)
nnonly_results[i] <- predict_y_nnonly$net.result
SSE_NN <- SSE_NN + (nnonly_results[i]-y_2[i])^2
predictnn_y <- compute(nn,nn_test_df)
nnresults[i] <- predictnn_y$net.result
final_results[i] <- nnresults[i] + predict_y[i]
SSE_hibr <- SSE_hibr+(final_results[i]-y_2[i])^2
}
RMSE_lin[k+1] <- sqrt(SSE_lin/testsize)
RMSE_hibr[k+1] <- sqrt(SSE_hibr/testsize)
}
#print(RMSE_lin[k+1])
#print(RMSE_hibr[k+1])
print(SSE_lin)
print(SSE_NN)
print(SSE_hibr)
library(tseries)
library(forecast)
library(neuralnet)
library(dynlm)
library(LPTime)
library(TTR)
#importing data, defining variables
dcoil=na.omit(dcoil)
ddates <- dcoil$observation_date
prices <- dcoil$DCOILWTICO_20200115
log_returns <- diff(log(prices[1:8000]), p=1) #training set
adf.test(log_returns)
#creating technical indicators
ddates2=ddates[1:8577]
prices2=prices[1:8577]
MA=SMA(prices2, n = 200)
moment <- momentum(prices2)
a=na.omit(cbind(ddates2, moment, MA, log_returns))
#setting timeseries
inds <- seq(as.Date("1986-10-16"), as.Date("2020-01-13"), by = "day")
x <- ts(cbind(a[,2],a[,3]),start=c(1986, as.numeric(format(inds[1], "%j"))), frequency=250)
colnames(x) <- c("moment", "ma")
plot(x)
y <- ts(cbind(a[,4]),start=c(1986, as.numeric(format(inds[1], "%j"))), frequency=250)
plot(y)
useddate <- as.Date(ddates[200:8000])
x.ma <- x[,2]
x.moment <- x[,1]
regdata=as.data.frame(cbind( x,y))
RMSE_lin <- matrix(0,50,1)
RMSE_hibr <- matrix(0,50,1)
k=0
#rolling window lm model
windowsSize <- 4000 # training data size
testsize    < - 70    # number of observation to forecast
Nexp <- floor((length(x.ma)-windowsSize+1)/testsize) #maximum of possible experiments
for(k in 0:10)  # run experiments
{
A         <- k*testsize + 1
B         <- A + windowsSize - 1
start_obs <- A
end_obs   <- B
y_2 <- y[A:B] #
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
df_nnonly <- data.frame(cbind(y_2,x.ma_2, x.moment_2))
llmm <- lm(y_2~x.ma_2+x.moment_2) #define linear model
intercept  <- coef(llmm)[1]
co_x.ma_2   <- coef(llmm)[2]
co_x.moment_2 <- coef(llmm)[3]
residual_tr <- residuals(llmm)
df_nn=data.frame(residual_tr, x.ma_2, x.moment_2) #data frame, for hybrid NN
nn=neuralnet(residual_tr~x.ma_2+x.moment_2, data=df_nn, hidden=3,act.fct = "logistic") #neural network fitting on the residuals of the linear model
nn_only=neuralnet(y_2~x.ma_2+x.moment_2, data=df_nnonly, hidden=3, act.fct="logistic") #single neural network, fitting on the original dataset
A <- B+1
B <- B + testsize
y_2 <- y[A:B]
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
predict_y <- matrix(0, testsize, 1)
nnonly_results <- matrix(0, testsize, 1)
residual_fc <- matrix(0, testsize, 1)
nnresults<- matrix(0, testsize, 1)
final_results<- matrix(0, testsize, 1)
SSE_lin <- 0
SSE_hibr <- 0
SSE_NN <- 0
for(i in 1:testsize)
{
predict_y[i] <- intercept+x.ma_2[i]*co_x.ma_2+x.moment_2[i]*co_x.moment_2
SSE_lin <- SSE_lin+(predict_y[i]-y_2[i])^2
residual_fc[i] <- predict_y[i]-y_2[i]
nn_test_df=data.frame(x.ma_2[i], x.moment_2[i])
predict_y_nnonly <- compute(nn_only, nn_test_df)
nnonly_results[i] <- predict_y_nnonly$net.result
SSE_NN <- SSE_NN + (nnonly_results[i]-y_2[i])^2
predictnn_y <- compute(nn,nn_test_df)
nnresults[i] <- predictnn_y$net.result
final_results[i] <- nnresults[i] + predict_y[i]
SSE_hibr <- SSE_hibr+(final_results[i]-y_2[i])^2
}
RMSE_lin[k+1] <- sqrt(SSE_lin/testsize)
RMSE_hibr[k+1] <- sqrt(SSE_hibr/testsize)
}
#print(RMSE_lin[k+1])
#print(RMSE_hibr[k+1])
print(SSE_lin)
print(SSE_NN)
print(SSE_hibr)
#rolling window lm model
windowsSize <- 4000 # training data size
testsize    < - 70    # number of observation to forecast
#rolling window lm model
windowsSize <- 4000 # training data size
testsize    < - 70    # number of observation to forecast
testsize
testsize    <- 70    # number of observation to forecast
Nexp <- floor((length(x.ma)-windowsSize+1)/testsize) #maximum of possible experiments
for(k in 0:10)  # run experiments
{
A         <- k*testsize + 1
B         <- A + windowsSize - 1
start_obs <- A
end_obs   <- B
y_2 <- y[A:B] #
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
df_nnonly <- data.frame(cbind(y_2,x.ma_2, x.moment_2))
llmm <- lm(y_2~x.ma_2+x.moment_2) #define linear model
intercept  <- coef(llmm)[1]
co_x.ma_2   <- coef(llmm)[2]
co_x.moment_2 <- coef(llmm)[3]
residual_tr <- residuals(llmm)
df_nn=data.frame(residual_tr, x.ma_2, x.moment_2) #data frame, for hybrid NN
nn=neuralnet(residual_tr~x.ma_2+x.moment_2, data=df_nn, hidden=3,act.fct = "logistic") #neural network fitting on the residuals of the linear model
nn_only=neuralnet(y_2~x.ma_2+x.moment_2, data=df_nnonly, hidden=3, act.fct="logistic") #single neural network, fitting on the original dataset
A <- B+1
B <- B + testsize
y_2 <- y[A:B]
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
predict_y <- matrix(0, testsize, 1)
nnonly_results <- matrix(0, testsize, 1)
residual_fc <- matrix(0, testsize, 1)
nnresults<- matrix(0, testsize, 1)
final_results<- matrix(0, testsize, 1)
SSE_lin <- 0
SSE_hibr <- 0
SSE_NN <- 0
for(i in 1:testsize)
{
predict_y[i] <- intercept+x.ma_2[i]*co_x.ma_2+x.moment_2[i]*co_x.moment_2
SSE_lin <- SSE_lin+(predict_y[i]-y_2[i])^2
residual_fc[i] <- predict_y[i]-y_2[i]
nn_test_df=data.frame(x.ma_2[i], x.moment_2[i])
predict_y_nnonly <- compute(nn_only, nn_test_df)
nnonly_results[i] <- predict_y_nnonly$net.result
SSE_NN <- SSE_NN + (nnonly_results[i]-y_2[i])^2
predictnn_y <- compute(nn,nn_test_df)
nnresults[i] <- predictnn_y$net.result
final_results[i] <- nnresults[i] + predict_y[i]
SSE_hibr <- SSE_hibr+(final_results[i]-y_2[i])^2
}
RMSE_lin[k+1] <- sqrt(SSE_lin/testsize)
RMSE_hibr[k+1] <- sqrt(SSE_hibr/testsize)
}
#print(RMSE_lin[k+1])
#print(RMSE_hibr[k+1])
print(SSE_lin)
print(SSE_NN)
print(SSE_hibr)
testsize
print(RMSE_lin[k+1])
print(RMSE_hibr[k+1])
#rolling window lm model
windowsSize <- 2000 # training data size
testsize    <- 600    # number of observation to forecast
Nexp <- floor((length(x.ma)-windowsSize+1)/testsize) #maximum of possible experiments
for(k in 0:10)  # run experiments
{
A         <- k*testsize + 1
B         <- A + windowsSize - 1
start_obs <- A
end_obs   <- B
y_2 <- y[A:B] #
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
df_nnonly <- data.frame(cbind(y_2,x.ma_2, x.moment_2))
llmm <- lm(y_2~x.ma_2+x.moment_2) #define linear model
intercept  <- coef(llmm)[1]
co_x.ma_2   <- coef(llmm)[2]
co_x.moment_2 <- coef(llmm)[3]
residual_tr <- residuals(llmm)
df_nn=data.frame(residual_tr, x.ma_2, x.moment_2) #data frame, for hybrid NN
nn=neuralnet(residual_tr~x.ma_2+x.moment_2, data=df_nn, hidden=3,act.fct = "logistic") #neural network fitting on the residuals of the linear model
nn_only=neuralnet(y_2~x.ma_2+x.moment_2, data=df_nnonly, hidden=3, act.fct="logistic") #single neural network, fitting on the original dataset
A <- B+1
B <- B + testsize
y_2 <- y[A:B]
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
predict_y <- matrix(0, testsize, 1)
nnonly_results <- matrix(0, testsize, 1)
residual_fc <- matrix(0, testsize, 1)
nnresults<- matrix(0, testsize, 1)
final_results<- matrix(0, testsize, 1)
SSE_lin <- 0
SSE_hibr <- 0
SSE_NN <- 0
for(i in 1:testsize)
{
predict_y[i] <- intercept+x.ma_2[i]*co_x.ma_2+x.moment_2[i]*co_x.moment_2
SSE_lin <- SSE_lin+(predict_y[i]-y_2[i])^2
residual_fc[i] <- predict_y[i]-y_2[i]
nn_test_df=data.frame(x.ma_2[i], x.moment_2[i])
predict_y_nnonly <- compute(nn_only, nn_test_df)
nnonly_results[i] <- predict_y_nnonly$net.result
SSE_NN <- SSE_NN + (nnonly_results[i]-y_2[i])^2
predictnn_y <- compute(nn,nn_test_df)
nnresults[i] <- predictnn_y$net.result
final_results[i] <- nnresults[i] + predict_y[i]
SSE_hibr <- SSE_hibr+(final_results[i]-y_2[i])^2
}
RMSE_lin[k+1] <- sqrt(SSE_lin/testsize)
RMSE_hibr[k+1] <- sqrt(SSE_hibr/testsize)
}
#print(RMSE_lin[k+1])
#print(RMSE_hibr[k+1])
print(SSE_lin)
print(SSE_NN)
print(SSE_hibr)
#creating technical indicators
ddates2=ddates[1:8000]
prices2=prices[1:8000]
MA=SMA(prices2, n = 200)
moment <- momentum(prices2)
a=na.omit(cbind(ddates2, moment, MA, log_returns))
#setting timeseries
inds <- seq(as.Date("1986-10-16"), as.Date("2020-01-13"), by = "day")
x <- ts(cbind(a[,2],a[,3]),start=c(1986, as.numeric(format(inds[1], "%j"))), frequency=250)
colnames(x) <- c("moment", "ma")
plot(x)
y <- ts(cbind(a[,4]),start=c(1986, as.numeric(format(inds[1], "%j"))), frequency=250)
plot(y)
useddate <- as.Date(ddates[200:8000])
x.ma <- x[,2]
x.moment <- x[,1]
regdata=as.data.frame(cbind( x,y))
RMSE_lin <- matrix(0,50,1)
RMSE_hibr <- matrix(0,50,1)
k=0
#rolling window lm model
windowsSize <- 2000 # training data size
testsize    <- 600    # number of observation to forecast
Nexp <- floor((length(x.ma)-windowsSize+1)/testsize) #maximum of possible experiments
for(k in 0:10)  # run experiments
{
A         <- k*testsize + 1
B         <- A + windowsSize - 1
start_obs <- A
end_obs   <- B
y_2 <- y[A:B] #
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
df_nnonly <- data.frame(cbind(y_2,x.ma_2, x.moment_2))
llmm <- lm(y_2~x.ma_2+x.moment_2) #define linear model
intercept  <- coef(llmm)[1]
co_x.ma_2   <- coef(llmm)[2]
co_x.moment_2 <- coef(llmm)[3]
residual_tr <- residuals(llmm)
df_nn=data.frame(residual_tr, x.ma_2, x.moment_2) #data frame, for hybrid NN
nn=neuralnet(residual_tr~x.ma_2+x.moment_2, data=df_nn, hidden=3,act.fct = "logistic") #neural network fitting on the residuals of the linear model
nn_only=neuralnet(y_2~x.ma_2+x.moment_2, data=df_nnonly, hidden=3, act.fct="logistic") #single neural network, fitting on the original dataset
A <- B+1
B <- B + testsize
y_2 <- y[A:B]
x.ma_2 <- x.ma[A:B]
x.moment_2 <- x.moment[A:B]
predict_y <- matrix(0, testsize, 1)
nnonly_results <- matrix(0, testsize, 1)
residual_fc <- matrix(0, testsize, 1)
nnresults<- matrix(0, testsize, 1)
final_results<- matrix(0, testsize, 1)
SSE_lin <- 0
SSE_hibr <- 0
SSE_NN <- 0
for(i in 1:testsize)
{
predict_y[i] <- intercept+x.ma_2[i]*co_x.ma_2+x.moment_2[i]*co_x.moment_2
SSE_lin <- SSE_lin+(predict_y[i]-y_2[i])^2
residual_fc[i] <- predict_y[i]-y_2[i]
nn_test_df=data.frame(x.ma_2[i], x.moment_2[i])
predict_y_nnonly <- compute(nn_only, nn_test_df)
nnonly_results[i] <- predict_y_nnonly$net.result
SSE_NN <- SSE_NN + (nnonly_results[i]-y_2[i])^2
predictnn_y <- compute(nn,nn_test_df)
nnresults[i] <- predictnn_y$net.result
final_results[i] <- nnresults[i] + predict_y[i]
SSE_hibr <- SSE_hibr+(final_results[i]-y_2[i])^2
}
RMSE_lin[k+1] <- sqrt(SSE_lin/testsize)
RMSE_hibr[k+1] <- sqrt(SSE_hibr/testsize)
}
#print(RMSE_lin[k+1])
#print(RMSE_hibr[k+1])
print(SSE_lin)
print(SSE_NN)
print(SSE_hibr)
#importing data, defining variables
dcoil=na.omit(dcoil)
ddates <- dcoil$observation_date
prices <- dcoil$DCOILWTICO_20200115
log_returns <- diff(log(prices[1:8000]), p=1) #training set
adf.test(log_returns)
#creating technical indicators
ddates2=ddates[1:8000]
prices2=prices[1:8000]
MA=SMA(prices2, n = 200)
moment <- momentum(prices2)
a=na.omit(cbind(ddates2, moment, MA, log_returns))
View(a)
length(ddates2)
length(moment)
length(MA)
length(log_returns)
log_returns <- diff(log(prices[1:8001]), p=1) #training set
adf.test(log_returns)
#creating technical indicators
ddates2=ddates[1:8000]
prices2=prices[1:8000]
MA=SMA(prices2, n = 200)
moment <- momentum(prices2)
a=na.omit(cbind(ddates2, moment, MA, log_returns))
#setting timeseries
inds <- seq(as.Date("1986-10-16"), as.Date("2017-09-20"), by = "day")
x <- ts(cbind(a[,2],a[,3]),start=c(1986, as.numeric(format(inds[1], "%j"))), frequency=250)
colnames(x) <- c("moment", "ma")
plot(x)
y <- ts(cbind(a[,4]),start=c(1986, as.numeric(format(inds[1], "%j"))), frequency=250)
plot(y)
#arima model
model=auto.arima(y=y,xreg=x)
summary(model)
training_res=resid(model) #hibatagok elmentése
momentmodel=auto.arima(x[,1]) #ma előrejelzéséhez model
mamodel=auto.arima(x[,2]) #arima előrejelzéséhez model
#forecastedvalues
forecastedmoment=forecast(momentmodel,h=578)
forecastedma=forecast(mamodel, h=578)
forecastmomentmean=forecastedmoment$mean
forecastmamean=forecastedma$mean
forecastedx=cbind(forecastmomentmean,forecastmamean)
colnames(forecastedx) <- c("moment", "ma")
forecastedvalues_ln <- forecast(model, h=578, xreg=forecastedx) #x-et is előre kell jelezni
forecastedvalues_ln
plot(forecastedvalues_ln)
numericfc=as.numeric(forecastedvalues_ln$mean)
finalfc=exp(numericfc)
#Error
df <- data.frame(prices[8000:8577], finalfc)
col_headings <- c("Actual price", "Forecasted price")
names(df) <- col_headings
attach(df)
fc_residual=forecast_resid=df$`Actual price`-df$`Forecasted price`
